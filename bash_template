#!/usr/bin/env bash
################ Script metadata ###############################################
#: Title        : 
#: Author       : Anthony Tilelli
#: Description  : 
#: Requirements : BASH 4.0+
#: Options      :
#: Version      : Major.minor.patch (https://semver.org/)
#: ExitCodes    : (reserved https://www.tldp.org/LDP/abs/html/exitcodes.html)
#:              : 0 "Success"
#:              : 1 General Failure (varied message)
#:              : 3 Bash-4.0+ is required to run this script
################ Script metadata ###############################################

# strict mode
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
# https://disconnected.systems/blog/another-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'
# shellcheck disable=SC2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

# Version Check
if ((BASH_VERSINFO < 4))
then
  printf "Bash-4.0+ is required to run this script \\n" >&2
  exit 3
fi

# Constants
readonly GL_LOG="/dev/null"


#Function
function die() {
  #@ DESCRIPTION:  prints error-message and exits script
  #@ USAGE:  die ERRORCODE ERROR_MESSAGE or die
  #@ REQUIREMENTS: NONE

  local -r ERRORCODE="${1:-1}"
  local -r ERROR_MESSAGE="${2:-"No \"ERROR_MESSAGE\" provided"}"
  local -r TIMESTAMP="$(date)"
  printf "FATAL %d: %s: %s\\n" "$ERRORCODE" "$TIMESTAMP" "$ERROR_MESSAGE" >&2
  printf "FATAL %d: %s: %s\\n" "$ERRORCODE" "$TIMESTAMP" "$ERROR_MESSAGE" >> "$GL_LOG"
  exit "$ERRORCODE"
}

function output() {
  #@ DESCRIPTION:  prints message
  #@ USAGE:  output <MESSAGE>
  #@ REQUIREMENTS: NONE

  local -r MESSAGE="${1:-"No \"MESSAGE\" provided"}"
  local -r TIMESTAMP="$(date)"
  printf "%s: (%s)\\n" "$MESSAGE" "$TIMESTAMP" 
  return 0
}

function warn() {
  #@ DESCRIPTION:  prints message to stderr
  #@ USAGE:  warn <MESSAGE>
  #@ REQUIREMENTS: NONE

  local -r MESSAGE="${1:-"No \"MESSAGE\" provided"}"
  local -r TIMESTAMP="$(date)"
  printf "WARNING: %s (%s)\\n" "$MESSAGE" "$TIMESTAMP" >&2
  printf "WARNING: %s (%s)\\n" "$MESSAGE" "$TIMESTAMP" >> "$GL_LOG"
  return 0

}

function trim()
{
  #@ SOURCE: https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
  #@ DESCRIPTION:  Removes leading and trailling spaces
  #@ USAGE:  trim <string>
  #@ REQUIREMENTS: NONE

  local trimmed="$1"

  # Strip leading spaces.
  while [[ $trimmed == ' '* ]]; do
      trimmed="${trimmed## }"
  done
  # Strip trailing spaces.
  while [[ $trimmed == *' ' ]]; do
      trimmed="${trimmed%% }"
  done

  echo "$trimmed"
}
# <-- User Functions here-->


# <-- Main Code Here -- >
main "$@"
exit 0
